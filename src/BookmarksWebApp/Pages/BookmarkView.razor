@page "/bookmarks"
@inject Bookmarks.Services.BookmarkSvc _svc
@using System.Text.Json.Serialization
@using DataModel;
@using MatBlazor;

<h1>Bookmarks</h1>

@if (_svc.Config == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MatList>
        <input @bind-value="_filter" @bind-value:event="oninput" />
        <MatButton @onclick="OnSearch"><span class="oi oi-question-mark">Search</span></MatButton>
    </MatList>
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            @foreach (var bookmark in FilteredBookmarks)
            {
                <MatCard class="mat-layout-grid-cell">
                    <MatCardContent>
                        <MatHeadline5>@bookmark.Title</MatHeadline5>
                        <MatList>
                            @foreach (var tag in bookmark.Tags)
                            {
                                <MatChip Label="@tag"></MatChip>
                            }
                        </MatList>
                    </MatCardContent>
                </MatCard>
            }
        </div>
    </div>
}
@code {
    private string _filter;

    private IEnumerable<Bookmark> FilteredBookmarks {
        get
        {
            var filter = Bookmarks.DataModel.Filtering.BookmarkFilter.Create(_filter);
            return _svc.Config.Bookmarks.Where(bm => filter.FilterOnSearchString(bm));
        }
    }

    private void OnSearch()
    {
        this.StateHasChanged();
    }

    protected override Task OnInitializedAsync()
    {
        return _svc.InitializeAsync();
    }
}
